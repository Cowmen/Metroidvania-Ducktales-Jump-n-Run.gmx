<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.6;
hsp = 0;
hsp_carry = 0;
vsp = 0;
movespeed = 4;
jumps = 0;
jumpsmax = 1;
jumpspeed_normal = movespeed*2.3;
jumpspeed = jumpspeed_normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player input
key_right =         keyboard_check(ord("D"))                
key_left =          -keyboard_check(ord("A"))               
key_jump =          keyboard_check_pressed(vk_space);
key_jump_held =     keyboard_check(vk_space);
key_down =          keyboard_check(ord("S"));
if keyboard_check_pressed(ord("R")) game_restart();

//React to inputs (Movement)
move = key_left + key_right;
hsp = move * movespeed;


if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_collision))
{
    jumps = jumpsmax;
}

if (key_jump) &amp;&amp; (jumps &gt; 0)
{
    jumps -= 1;
    vsp = -jumpspeed;
}

if (vsp &lt; 0) &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/4)

if (key_jump) &amp;&amp; (place_meeting(x+1,y,obj_collision) || place_meeting(x-1,y,obj_collision))
{
    vsp = -jumpspeed;
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_collision))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_collision,))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_collision))
{
    while(!place_meeting(x,y+sign(vsp),obj_collision,))
    {
        y += sign(vsp);
    }
    vsp = 0;

  
}

y += vsp;



//Test
if global.hp &gt;0{
if keyboard_check_pressed(ord("F")) global.hp -=10}
if global.hp &lt;100{
if keyboard_check_pressed(ord("G")) global.hp +=10}

//Lives
if global.hp &lt;=0{
    global.xtralives -= 1
    room_restart()
    global.hp =100
}
//Checks if Lives is 0
if global.xtralives &lt;=0 game_restart()

//Deathzone
if (place_meeting(x,y,obj_deathzone)){
    global.xtralives -=1
    room_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
